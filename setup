#!/bin/bash
#
# Description: 
# Creates a fresh copy of the gtfs data, clears the database and then populates new database tables.
# Script must be run from main project directory.
# 
# Usage:
# setup [-c|--clean-db] [-i|--import-only] [-f gtfs_data_path]
#
# Arguments:
# Pass the -c parameter to clean and resync the db only.
# Pass -i parameter to only clean db & import data (no download)
# Pass the -f parameter to choose an alternate location for data files. Default is ./easygrt/data
#
# Logging:
# Output is sent to stdout as well as a text file named "setup.log" 
#
usage() {
  
  echo "setup [-c|--clean-db] [-i|--import-only] [-f gtfs_data_path]"
}

defaults() {

  clean_only="NO"
  import_only="NO"
  gtfs_data_path="./easygrt/data"

}

get_logfile() {

  logfile="setup.log"

}


run_python() {

  if [ "$clean_only" == "NO" -a  "$import_only" == "NO" ] ; then
    echo "Downloading & extracting data" | tee ${logfile}
    python manage.py getdata $gtfs_data_path
  fi

  echo "Clearing DB" | tee ${logfile}
  python manage.py sqlclear easygrt | python manage.py dbshell | tee ${logfile}
  echo "Re-syncing DB" | tee ${logfile}
  python manage.py syncdb | tee ${logfile}

  if [ "$clean_only" == "NO" ] ; then
    echo "Starting import" | tee {$logfile}
    python manage.py importdata $gtfs_data_path | tee ${logfile}
  fi

}

defaults

for i in $@ ; do
  case $i in 
    -c|--clean-db)
      clean_only="YES"
      ;;
    -i|--import-only)
      import_only="YES"
      ;;
    -f=*)
      gtfs_data_path=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    *)
      usage
      exit
      ;;
  esac
done

get_logfile
run_python
